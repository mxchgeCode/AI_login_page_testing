name: Auto Test Generation and Execution

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'app.py'
      - 'smart_test_generator.py'
      - 'test_validator.py'
      - 'code_tracker.py'
      - 'test_runner.py'
      - 'requirements.txt'

jobs:
  test-generation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-venv

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest flake8 coverage pytest-cov pytest-mock

      - name: Set up environment
        run: |
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> $GITHUB_ENV

      - name: Check for changes in app.py
        id: check-changes
        run: |
          echo "Checking if app.py has changed..."
          if git diff --quiet HEAD~1 HEAD -- app.py; then
            echo "No changes in app.py"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in app.py"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          coverage run -m pytest test_generated.py -v --cov=app --cov-report=term
          echo "COVERAGE_EXIT_CODE=$?" >> $GITHUB_ENV
          echo "Coverage data collected successfully"

      - name: Generate coverage reports
        run: |
          echo "Generating coverage reports..."
          if [ -f ".coverage" ]; then
            echo "Coverage data found, generating reports..."
            coverage xml -o coverage.xml || echo "XML report generation failed"
            coverage report -m > coverage.txt || echo "Text report generation failed"
            coverage json -o coverage.json || echo "JSON report generation failed"
          else
            echo "No coverage data found, creating empty reports..."
            echo "No data to report" > coverage.txt
            echo "<coverage><sources><source>.</source></sources><packages><package><classes><class><methods><method><lines><line><hits><hit></hit></hits></line></lines></method></methods></class></classes></package></packages></coverage>" > coverage.xml
            echo '{"coverage": null, "no_data": true}' > coverage.json
          fi

      - name: Run test validation
        run: |
          echo "Running test validation..."
          python -m pytest test_generated.py -v --tb=short
          TEST_EXIT_CODE=$?
          echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_ENV
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "Tests failed, setting workflow as failed"
            exit 1
          fi
          echo "Test validation completed successfully"

      - name: Generate tests for new functions
        run: |
          echo "Generating tests for new or modified functions..."
          python smart_test_generator.py

      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test_generated.py
            coverage.xml
            coverage.txt
            coverage.json
          retention-days: 7
        continue-on-error: true

      - name: Test results summary
        run: |
          echo "âœ… All tests completed successfully"
          echo "ðŸ“Š Test results uploaded as artifacts"
